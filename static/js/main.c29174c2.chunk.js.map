{"version":3,"sources":["constants/index.js","actions/index.js","components/AddEvent.js","components/ClearEvents.js","components/MainSection.js","components/App.js","serviceWorker.js","reducers/events.js","reducers/index.js","index.js"],"names":["ADD_EVENT","CLEAR_EVENTS","SELECTALL_EVENTS","DESELECTALL_EVENTS","TOGGLE_EVENT","selectAllEvents","type","types","deSelectAllEvents","clearEvents","filterText","text","AddEvent","cities","state","open","name","date","Date","address","handleChange","event","_this","setState","Object","defineProperty","target","value","handleDateChange","this","city","toLocaleDateString","props","dispatch","addEvent","react_default","a","createElement","Button_default","onClick","handleClickOpen","bind","Dialog_default","onClose","handleClose","aria-labelledby","DialogTitle_default","DialogContent_default","FormControl_default","TextField_default","label","onChange","material_ui_pickers_esm","margin","InputLabel_default","htmlFor","Select_default","input","Input_default","id","map","index","MenuItem_default","key","DialogActions_default","color","handleAdd","Component","connect","handleClearEvents","isSelected","events","find","selected","disabled","MainSection","onSelectAllClick","checked","_this2","Toolbar_default","components_AddEvent","ClearEvents","placeholder","Table_default","TableHead_default","TableRow_default","TableCell_default","Checkbox_default","TableBody_default","handleToggle","filters","filter","toUpperCase","includes","App","className","components_MainSection","Boolean","window","location","hostname","match","initialState","filtersReducerDefaultState","rootReducer","combineReducers","arguments","length","undefined","action","concat","toConsumableArray","reduce","maxId","Math","max","objectSpread","assign","store","createStore","reducer","ReactDOM","render","es","utils","DateFnsUtils","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c29174c2.chunk.js","sourcesContent":["export const ADD_EVENT = 'ADD_EVENT'\r\nexport const CLEAR_EVENTS = 'CLEAR_EVENTS'\r\nexport const SELECTALL_EVENTS = 'SELECTALL_EVENTS'\r\nexport const DESELECTALL_EVENTS = 'DESELECTALL_EVENTS'\r\nexport const TOGGLE_EVENT = 'TOGGLE_EVENT'\r\nexport const FILTER_TEXT = 'FILTER_TEXT'\r\n\r\n","import * as types from '../constants'\r\n\r\nexport const addEvent = (name, date, address) => ({ type: types.ADD_EVENT,  name, date, address})\r\nexport const selectAllEvents = () => ({type: types.SELECTALL_EVENTS})\r\nexport const deSelectAllEvents = () => ({type: types.DESELECTALL_EVENTS})\r\n\r\nexport const clearEvents = () => ({ type: types.CLEAR_EVENTS })\r\nexport const toggleEvent = id => ({ type: types.TOGGLE_EVENT, id })\r\nexport const filterText = text => ({type: types.FILTER_TEXT, text})\r\n","import React, {Component } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Input from '@material-ui/core/Input';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { connect } from 'react-redux';\r\nimport { addEvent } from '../actions';\r\nimport { DatePicker } from 'material-ui-pickers';\r\n\r\nclass AddEvent  extends Component {\r\n    cities = [\r\n        'Нижний Новгород',\r\n        'Арзамас',\r\n        'Москва'\r\n    ]\r\n\r\n    state = {\r\n        open: false,\r\n        name: '',\r\n        date: new Date(),\r\n        address: ''\r\n    }\r\n\r\n     handleClickOpen() {\r\n      this.setState({open:true});\r\n    }\r\n  \r\n     handleClose() {\r\n        this.setState({open:false});\r\n    }\r\n\r\n    handleAdd() {\r\n        const city = this.cities[this.state.address],\r\n            date = this.state.date.toLocaleDateString()\r\n        this.props.dispatch(addEvent(this.state.name,date, city))\r\n        this.setState({open:false});\r\n    }\r\n    handleChange = name => event => {\r\n        this.setState({[name]: event.target.value });\r\n    }\r\n    handleDateChange = date => {\r\n        this.setState({ date: date });\r\n      };\r\n    render () {\r\n        return (\r\n        <div>\r\n            <Button onClick={this.handleClickOpen.bind(this)}>+</Button>\r\n            <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle >Добавление мероприятия</DialogTitle>\r\n            <DialogContent>\r\n                <FormControl>\r\n                    <FormControl>\r\n                        <TextField\r\n                        label=\"Название\"\r\n                        type=\"text\"\r\n                        value={this.state.name}\r\n                        onChange={this.handleChange('name')}\r\n                        \r\n                        />\r\n                        </FormControl>\r\n                        <FormControl>\r\n                           <DatePicker\r\n                                margin=\"normal\"\r\n                                label=\"Дата\"\r\n                                value={this.state.date}\r\n                                onChange={this.handleDateChange}\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl>\r\n                        <InputLabel htmlFor=\"addr-select\">Адрес</InputLabel>\r\n                        <Select\r\n                            value={this.state.address}\r\n                            input={<Input name=\"age\" id=\"addr-select\" />}                        onChange={this.handleChange('address')}\r\n                        >\r\n                            {this.cities.map((city, index)=> (\r\n                                <MenuItem value={index} key={index}>{city}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </FormControl>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={this.handleClose.bind(this)} color=\"primary\">\r\n                Отмена\r\n                </Button>\r\n                <Button onClick={this.handleAdd.bind(this)} color=\"primary\">\r\n                Добавить\r\n                </Button>\r\n            </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect()(AddEvent)","import React, {Component } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { connect } from 'react-redux';\r\nimport { clearEvents } from '../actions';\r\n\r\nclass AddEvent  extends Component {\r\n  \r\n    state = {\r\n        open: false\r\n    }\r\n    handleClearEvents = (event) => {\r\n        this.props.dispatch(clearEvents())\r\n        this.setState({open:false});\r\n    }\r\n    isSelected = ()=> {\r\n        return !this.props.events.find(event=>event.selected)\r\n    }    \r\n     handleClickOpen = () => {\r\n      this.setState({open:true});\r\n    }\r\n  \r\n     handleClose = () => {\r\n        this.setState({open:false});\r\n    }\r\n    render () {\r\n        return (\r\n        <div>\r\n            <Button disabled={this.isSelected()}   onClick={this.handleClickOpen}>-</Button>\r\n            <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle >Удаление мероприятия</DialogTitle>\r\n            <DialogContent>\r\n                Вы действительно хотите удаленить выбранные мероприятия?\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={this.handleClose} color=\"primary\">\r\n                Отмена\r\n                </Button>\r\n                <Button onClick={this.handleClearEvents} color=\"primary\">\r\n                Удалить\r\n                </Button>\r\n            </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        events: state.events\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(AddEvent)","import React, { Component } from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport AddEvent from '../components/AddEvent'\r\nimport ClearEvents from '../components/ClearEvents'\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {filterText, toggleEvent, selectAllEvents, deSelectAllEvents} from '../actions';\r\nclass MainSection extends Component {\r\n    handleToggle(event) {\r\n        this.props.dispatch(toggleEvent(event.id))\r\n    }\r\n\r\n    filterText = () => (event) => {\r\n        this.props.dispatch(filterText(event.target.value))\r\n    }\r\n    onSelectAllClick = () => (event) => {\r\n        if (event.target.checked) {\r\n            this.props.dispatch(selectAllEvents())\r\n        }\r\n        else {\r\n            this.props.dispatch(deSelectAllEvents()) \r\n        }\r\n    }\r\n    render() {\r\n        const { events } = this.props\r\n        return (\r\n        <div>\r\n        <Toolbar>\r\n            <AddEvent></AddEvent>\r\n            <ClearEvents></ClearEvents>\r\n            <TextField \r\n                onChange={this.filterText()}\r\n                placeholder=\"Поиск\" >\r\n            </TextField>\r\n        </Toolbar>\r\n\r\n\r\n        <Table>\r\n            <TableHead>\r\n                <TableRow>\r\n                    <TableCell>\r\n                    <Checkbox\r\n                        onChange={this.onSelectAllClick()}\r\n                    />\r\n\r\n                    </TableCell>\r\n                    <TableCell>\r\n                        Название\r\n                    </TableCell>\r\n                    <TableCell>\r\n                        Дата\r\n                    </TableCell>    \r\n                    <TableCell>\r\n                        Адрес\r\n                    </TableCell>\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {events.map(event=>(\r\n                    <TableRow key={event.id}>\r\n                    <TableCell>\r\n                        <Checkbox checked={event.selected} \r\n                        onChange={this.handleToggle.bind(this,event)}\r\n                        />\r\n                    </TableCell>\r\n                    <TableCell>{event.name}</TableCell>\r\n                    <TableCell>{event.date}</TableCell>\r\n                    <TableCell>{event.address}</TableCell>\r\n                    </TableRow>\r\n                ))}\r\n                \r\n            </TableBody>\r\n            </Table>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst getFilteredEvents = (events, filters) => {\r\n    return events.filter(event=>event.name.toUpperCase().includes(filters.text.toUpperCase()))\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        events: getFilteredEvents(state.events, state.filters)\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(MainSection);","import React, { Component } from 'react';\nimport './App.css';\nimport MainSection from '../components/MainSection'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n        <MainSection />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    ADD_EVENT,\r\n    CLEAR_EVENTS,\r\n    TOGGLE_EVENT,\r\n    SELECTALL_EVENTS,\r\n    DESELECTALL_EVENTS,\r\n} from '../constants'\r\n\r\nconst initialState = [{\r\n        id: 0,\r\n        name: 'Мероприятие 1',\r\n        date: '20.08.2017',\r\n        address: 'Нижний Новгород',\r\n        selected: false\r\n    },\r\n    {\r\n        id: 1,\r\n        name: 'Мероприятие 2',\r\n        date: '13.09.2017',\r\n        address: 'Саров',\r\n        selected: true\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Мероприятие 3',\r\n        date: '03.10.2017',\r\n        address: 'Арзамас',\r\n        selected: false\r\n    }\r\n]\r\n\r\nexport default function events(state = initialState, action) {\r\n    switch (action.type) {\r\n        case ADD_EVENT:\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: state.reduce((maxId, event) => Math.max(event.id, maxId), -1) + 1,\r\n                    name: action.name,\r\n                    date: action.date,\r\n                    address: action.address,\r\n                    selected: false\r\n\r\n                }\r\n            ]\r\n\r\n        case CLEAR_EVENTS:\r\n            return state.filter(event =>\r\n                !event.selected\r\n            )\r\n        case TOGGLE_EVENT:\r\n            return state.map(event =>\r\n                event.id === action.id ? { ...event,\r\n                    selected: !event.selected\r\n                } :\r\n                event\r\n            )\r\n\r\n        case SELECTALL_EVENTS:\r\n            return state.map(event => Object.assign(event, {\r\n                selected: true\r\n            }))\r\n        case DESELECTALL_EVENTS:\r\n            return state.map(event => Object.assign(event, {\r\n                selected: false\r\n            }))\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n  combineReducers\r\n} from 'redux'\r\nimport events from './events'\r\n\r\n\r\nimport {\r\n  FILTER_TEXT\r\n} from '../constants'\r\n\r\nconst filtersReducerDefaultState = {\r\n  text: ''\r\n};\r\n\r\n\r\nconst filters = (state = filtersReducerDefaultState, action) => {\r\n  switch (action.type) {\r\n    case FILTER_TEXT:\r\n      return {\r\n        ...state,\r\n        text: action.text\r\n      };\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  events,\r\n  filters\r\n})\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { MuiPickersUtilsProvider } from 'material-ui-pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\nimport { createStore } from 'redux'\nimport reducer from './reducers'\n\n\nconst store = createStore(reducer)\nReactDOM.render(\n    <Provider store={store}>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <App />\n      </MuiPickersUtilsProvider>\n    </Provider>,\n document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}